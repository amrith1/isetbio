function synthesizedRFParams = synthesizeRetinalRFparamsConsistentWithVisualRFparams(obj, ...
    rfCenterInputConesNum, rfCenterPositionMicrons, deconvolutionOpticsParams)
% Returns a struct with corresponding retinal <-> visual parameter of
% center/surround characteristic radii & peak sensitivities. These
% are computed from the retinal RF center size and position as determined
% by the connectivity matrix between the cone mosaic and the mRGC RF
% mosaic. The correspondence between retinal <-> visual parameters is build
% based on a deconvolution model (computed based on the various deconvolution files
% which are generated via obj.generatePolansOpticsDeconvolutionFiles()).
% 
    % Validate deconvolutionOpticsParams
    obj.validateDeconvolutionOpticsParams(deconvolutionOpticsParams);
    
    % Compute the deconvolution model. This relies on the various
    % ecc_-%2.1f_deconvolutions_refractionError_%2.2fD.mat data files that
    % are generated by obj.generatePolansOpticsDeconvolutionFiles(deconvolutionOpticsParams)
    % See performPSFConvoComputations

    deconvolutionModel = obj.computeDeconvolutionModel(deconvolutionOpticsParams);

    % Convert RF center positions in retinal microns to visual degs
    rfEccRadiusMicrons = (sqrt(sum(rfCenterPositionMicrons.^2,2.0)));
    rfEccRadiusDegs = WatsonRGCModel.rhoMMsToDegs(rfEccRadiusMicrons/1000.0);
    
    % Compute linear interpolation weights for combining data from the 2
    % closest tabluated eccentricity radii
    rgcsNum = size(rfCenterPositionMicrons,1);
    
    % Find interpolation weights for the center deconvolution
    interpolationWeights = zeros(rgcsNum,2);
    interpolationEccIndices = zeros(rgcsNum,2);
    
    % Sort the tabulated eccentricities
    tabulatedEccentricityRadiiDegs = sort(deconvolutionModel.center.tabulatedEccentricityRadii);
    
    parfor RGCindex = 1:rgcsNum
        % Determine the model's 2 closest tabulatedEccentricityRadii to this cell's eccentricity. 
        % We will interpolate deconvolution model params from these 2 eccentricities.
        theRGCeccentricityDegs = rfEccRadiusDegs(RGCindex);
        
        % Find the index of the tabulated eccentricity that is greater or equal to the cell's eccentricity
        idxPos = find(tabulatedEccentricityRadiiDegs >= theRGCeccentricityDegs);
        if (isempty(idxPos))
            fprintf(2,'Deconvolution data do not extend up to ecc of %2.3f degs. Max deconvolution ecc: %2.3f degs.\n', ...
                rfEccRadiusDegs(RGCindex), max(tabulatedEccentricityRadiiDegs));
        end
        
        % Find the index of the tabulated eccentricity that is greater or equal to the cell's eccentricity
        idxNeg = find(tabulatedEccentricityRadiiDegs <= theRGCeccentricityDegs);
        
        if (isempty(idxPos))
            fprintf(2,'Deconvolution data do not extenddown to to ecc of %2.3f degs. Min deconvolution ecc: %2.3f degs.\n', ...
                rfEccRadiusDegs(RGCindex), min(tabulatedEccentricityRadiiDegs));
        end
        
        % Intepolation eccentricity indices for this cell
        interpolationEccIndices(RGCindex,:) = [idxNeg(end) idxPos(1)];
        
        % Compute interpolation weights based on the distance of this cells
        % ecc to the 2 intepolation eccentricities
        interpolationEccs = tabulatedEccentricityRadiiDegs(interpolationEccIndices(RGCindex,:));
        interpolationEccRange = abs(diff(interpolationEccs));
        
        eccDiffs = abs(interpolationEccs - theRGCeccentricityDegs);
        % Interpolation weights
        interpolationWeights(RGCindex,:) = [eccDiffs(2) eccDiffs(1)]/interpolationEccRange;
        
        if (interpolationEccRange == 0)
            interpolationWeights(RGCindex,:) = [1.0 0.0];
        end
            
    end

   
    % Memory allocation
    centerVisualCharacteristicRadiiDegs = zeros(rgcsNum,1);
    centerRetinalCharacteristicRadiiDegs = zeros(rgcsNum,1);
    centerVisualGainSensitivity = zeros(rgcsNum,1);
    centerRetinalGainSensitivity = zeros(rgcsNum,1);
    
    
    % Use the deconvolutionModel.center to determine the center's VISUAL characteristic radius
    % based on the number of input cones to this cells' RF center, and also
    % the center's visual and retinal gain attenuation factors
    tabulatedRFcenterConeInputsNum = squeeze(deconvolutionModel.center.centerConeInputsNum(1,:));
    
    parfor RGCindex = 1:rgcsNum
        neighboringEccIndices = interpolationEccIndices(RGCindex,:);
        coneInputsIndex = find(tabulatedRFcenterConeInputsNum == rfCenterInputConesNum(RGCindex));
        
        % Weighted (according to the neighboring eccentricities) radiusMin and radiusMax
        visualRadiusMin = sum((deconvolutionModel.center.visualCharacteristicRadiusMin(neighboringEccIndices,coneInputsIndex))' .* interpolationWeights(RGCindex,:),2);
        visualRadiusMax = sum((deconvolutionModel.center.visualCharacteristicRadiusMax(neighboringEccIndices,coneInputsIndex))' .* interpolationWeights(RGCindex,:),2);
        retinalRadiusMin = sum((deconvolutionModel.center.retinalCharacteristicRadiusMin(neighboringEccIndices,coneInputsIndex))' .* interpolationWeights(RGCindex,:),2);
        retinalRadiusMax = sum((deconvolutionModel.center.retinalCharacteristicRadiusMax(neighboringEccIndices,coneInputsIndex))' .* interpolationWeights(RGCindex,:),2);
        % Mean VISUAL characteristic radius of the center
        centerVisualCharacteristicRadiiDegs(RGCindex) = mean([visualRadiusMin visualRadiusMax]);
        % Mean RETINAL characteristic radius of the center
        centerRetinalCharacteristicRadiiDegs(RGCindex) = mean([retinalRadiusMin retinalRadiusMax]);
        % Mean VISUAL gain sensitivity of the center
        centerVisualGainSensitivity(RGCindex)  = sum((deconvolutionModel.center.visualGain(neighboringEccIndices,coneInputsIndex))' .* interpolationWeights(RGCindex,:),2);
        % Mean RETINAL gain sensitivity of the center
        centerRetinalGainSensitivity(RGCindex) = sum((deconvolutionModel.center.retinalGain(neighboringEccIndices,coneInputsIndex))' .* interpolationWeights(RGCindex,:),2);
    end
    
    % Use the Croner&Kaplan model centerPeakSensitivityFunction() to
    % compute the center VISUAL peak sensitivity from the center's VISUAL
    % characteristic radius computed previously
    centerVisualPeakSensitivities = obj.centerPeakSensitivityFunction(obj.centerPeakSensitivityParams, centerVisualCharacteristicRadiiDegs);
    
    % Compute peak sensitivity boosting factor. This is determined from
    % fitting flat-top Gaussians to the retinal and visual cone activation
    % maps (see CronerKaplanRGCModel.performDeconvolutionAnalysisForRFcenter()).
    % Basically we are boosting the center peak sensitivity by the inverse
    % of the centerVisualGain (which is attenuated due to optical blurring)
    % NOTE. We also multiply by the centerRetinalGain to take into effect any
    % artifacts introduced by the fitting. But maybe we shouldnt be doing
    % this.
    centerPeakSensitivityBoostingFactor = (1 ./ centerVisualGainSensitivity) .* centerRetinalGainSensitivity;
    
    % Multiply with the corresponding boosting factors 
    centerRetinalPeakSensitivities = centerVisualPeakSensitivities .* centerPeakSensitivityBoostingFactor;
    

    % Having determined the center VISUAL characteristic radius, we use the Croner&Kaplan model center-to-surround ratio function to
    % compute the surround VISUAL characteristic radius 
    surroundVisualCharacteristicRadiiDegs = CronerKaplanRGCModel.surroundRadiusFromCenterRadiusDegs(centerVisualCharacteristicRadiiDegs);

    % Next, we use the Croner&Kaplan model surround to center integrated
    % VISUAL sensitivity ratio to compute the surround VISUAL peak sensitivity
    surroundVisualPeakSensitivities = ...
        CronerKaplanRGCModel.surroundToCenterIntegratedVisualSensitivityRatiosFromEccDegs(rfEccRadiusDegs) .* ...
        centerVisualPeakSensitivities ./ ...
        ((surroundVisualCharacteristicRadiiDegs./centerVisualCharacteristicRadiiDegs).^2);
    
    % In the final step, we compute the surround RETINAL characteristic radius and peak sensitivity 
    % using the deconvolutionModel.surround
    
    surroundRetinalCharacteristicRadiiDegs = zeros(rgcsNum,1);
    surroundRetinalGainSensitivity = zeros(rgcsNum,1);
    surroundVisualGainSensitivity = zeros(rgcsNum,1);
    
    for RGCindex = 1:rgcsNum
        neighboringEccIndices = interpolationEccIndices(RGCindex,:);
        coneInputsIndex = find(tabulatedRFcenterConeInputsNum == rfCenterInputConesNum(RGCindex));
        for k = 1:2
            examinedVisualCharacteristicRadii = squeeze(deconvolutionModel.surround.visualCharacteristicRadius(neighboringEccIndices(k),coneInputsIndex,:));
            
            % Find the index of the tabulated surround radii that is greater or equal to the cell's surround radius
            idxPos = find(examinedVisualCharacteristicRadii >= surroundVisualCharacteristicRadiiDegs(RGCindex));
            if (isempty(idxPos))
                [~,idxPos] = max(examinedVisualCharacteristicRadii);
                fprintf(2,'Deconvolution data do not extend up to surround radii of %2.3f degs. Max surround radius : %2.3f degs.\n', ...
                    surroundVisualCharacteristicRadiiDegs(RGCindex), max(examinedVisualCharacteristicRadii));
               
            end
        
            % Find the index of the tabulated eccentricity that is greater or equal to the cell's eccentricity
            idxNeg = find(examinedVisualCharacteristicRadii <= surroundVisualCharacteristicRadiiDegs(RGCindex));
            if (isempty(idxNeg))
                fprintf(2,'Deconvolution data do not extend down to surround radii of %2.3f degs. Min surround radius : %2.3f degs.\n', ...
                    surroundVisualCharacteristicRadiiDegs(RGCindex), min(examinedVisualCharacteristicRadii));
            end
            
            % Intepolation eccentricity indices for this cell
            interpolationSurroundRadiiIndices = [idxNeg(end) idxPos(1)];

            % Compute interpolation weights based on the distance of this cells
            % ecc to the 2 intepolation eccentricities
            interpolationRadii = examinedVisualCharacteristicRadii(interpolationSurroundRadiiIndices);
            interpolationRadiiRange = abs(diff(interpolationRadii));
        
            radiiDiffs = abs(interpolationRadii - surroundVisualCharacteristicRadiiDegs(RGCindex));
            % Interpolation weights
            interpolationWeights = [radiiDiffs(2) radiiDiffs(1)]/interpolationRadiiRange;
            
            if (interpolationRadiiRange == 0)
                interpolationWeights = [1.0 0.0];
            end
            
            retinalCharacteristicRadiusEstimates(k) = ...
                deconvolutionModel.surround.retinalCharacteristicRadius(neighboringEccIndices(k),coneInputsIndex,interpolationSurroundRadiiIndices(1)) * interpolationWeights(1) + ...
                deconvolutionModel.surround.retinalCharacteristicRadius(neighboringEccIndices(k),coneInputsIndex,interpolationSurroundRadiiIndices(2)) * interpolationWeights(2);
            
            visualGainSensitivityEstimates(k) = ...
                deconvolutionModel.surround.visualGain(neighboringEccIndices(k),coneInputsIndex, interpolationSurroundRadiiIndices(1)) * interpolationWeights(1) + ...
                deconvolutionModel.surround.visualGain(neighboringEccIndices(k),coneInputsIndex, interpolationSurroundRadiiIndices(2)) * interpolationWeights(2);
            
            retinalGainSensitivityEstimates(k) = ...
                deconvolutionModel.surround.retinalGain(neighboringEccIndices(k),coneInputsIndex, interpolationSurroundRadiiIndices(1)) * interpolationWeights(1) + ...
                deconvolutionModel.surround.retinalGain(neighboringEccIndices(k),coneInputsIndex, interpolationSurroundRadiiIndices(2)) * interpolationWeights(2);
        end
        
        % Weighted (according to the neighboring eccentricities) estimates
        surroundRetinalCharacteristicRadiiDegs(RGCindex) = sum(retinalCharacteristicRadiusEstimates .* interpolationWeights,2);
        surroundRetinalGainSensitivity(RGCindex) = sum(retinalGainSensitivityEstimates .* interpolationWeights,2);
        surroundVisualGainSensitivity(RGCindex) = sum(visualGainSensitivityEstimates .* interpolationWeights,2); 
    end
    
    
    % Compute peak sensitivity boosting factor. This is determined from
    % fitting flat-top Gaussians to the retinal and visual cone activation
    % maps (see CronerKaplanRGCModel.performDeconvolutionAnalysisForRFsurround()).
    % Basically we are boosting the center peak sensitivity by the inverse
    % of the centerVisualGain (which is attenuated due to optical blurring)
    % NOTE. We also multiply by the centerRetinalGain to take into effect any
    % artifacts introduced by the fitting. But maybe we shouldnt be doing
    % this.
    surroundPeakSensitivityBoostingFactor = (1 ./ surroundVisualGainSensitivity) .* surroundRetinalGainSensitivity;
    
    % Multiply with the corresponding boosting factors 
    surroundRetinalPeakSensitivities = surroundVisualPeakSensitivities .* surroundPeakSensitivityBoostingFactor;
    
    % Compute surround radius in retinal microns
    surroundRetinalCharacteristicRadiiMicrons = WatsonRGCModel.sizeDegsToSizeRetinalMicrons(surroundRetinalCharacteristicRadiiDegs, rfEccRadiusDegs);
    
    synthesizedRFParams = struct(...
        'rfEccRadiusDegs', rfEccRadiusDegs, ...                                                   % ecc of RGCs within the target patch  - DONE
        'rfCenterPositionMicrons', rfCenterPositionMicrons, ...
        'visual', struct(...                                                        % VISUAL RF properties
            'centerCharacteristicRadiiDegs', centerVisualCharacteristicRadiiDegs, ...             
            'surroundCharacteristicRadiiDegs', surroundVisualCharacteristicRadiiDegs, ...         
            'centerPeakSensitivities', centerVisualPeakSensitivities,...            
            'surroundPeakSensitivities', surroundVisualPeakSensitivities...          
            ), ...
         'retinal', struct(...                                                      % RETINAL RF properties
             'centerCharacteristicRadiiDegs', centerRetinalCharacteristicRadiiDegs, ...          
             'surroundCharacteristicRadiiDegs', surroundRetinalCharacteristicRadiiDegs, ...          
             'surroundCharacteristicRadiiMicrons', surroundRetinalCharacteristicRadiiMicrons, ...
             'centerPeakSensitivities', centerRetinalPeakSensitivities,... 
             'surroundPeakSensitivities', surroundRetinalPeakSensitivities... 
            )...
         ); 
end

