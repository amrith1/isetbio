function theWVF = makeWVF(wavefrontSpatialSamples, zcoeffs, measWavelength, wavelengthsToCompute, ...
    measPupilDiameterMM, calcPupilDiameterMM, umPerDegree, name, varargin)

    % Parse input
    p = inputParser;
    p.addParameter('flipPSFUpsideDown', false, @islogical);
    p.parse(varargin{:});
    flipPSFUpsideDown = p.Results.flipPSFUpsideDown;
    
    theWVF = wvfCreate(...
    			'umPerDegree', umPerDegree, ...
                'calc wavelengths',wavelengthsToCompute,...
                'measuredpupil', measPupilDiameterMM, ...
                'calc pupil size',calcPupilDiameterMM, ...
                'spatialsamples', wavefrontSpatialSamples, ...
                'zcoeffs', zcoeffs,...
                'measured wl', measWavelength, ...
                'name', name, ...
                'flipPSFUpsideDown', flipPSFUpsideDown);
    
    % Now compute the PSF
    theWVF = wvfComputePSF(theWVF);
end